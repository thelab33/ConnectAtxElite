(() => {
  // app/static/js/main.js
  (() => {
    "use strict";
    document.querySelectorAll("[data-tier-cta]").forEach((btn) => {
      const amount = Number(btn.dataset.amount || 0);
      btn.addEventListener("click", () => {
        alert(`Opening sponsorship form for $${amount.toLocaleString()}`);
      });
    });
    const faqBtn = document.getElementById("tiers-faq-toggle");
    const faqBody = document.getElementById("tiers-faq-body");
    if (faqBtn && faqBody) {
      faqBtn.addEventListener("click", () => {
        const expanded = faqBtn.getAttribute("aria-expanded") === "true";
        faqBtn.setAttribute("aria-expanded", String(!expanded));
        faqBody.hidden = expanded;
        faqBtn.firstElementChild.textContent = expanded ? "\u25B6" : "\u25BC";
      });
    }
  })();
  (() => {
    "use strict";
    const hud = document.getElementById("goal-hud");
    if (!hud) return;
    const total = Number(hud.dataset.goal || 0);
    let raised = Number(hud.dataset.raised || 0);
    const fullDash = 565.48;
    const arc = hud.querySelector("[data-goal-arc]");
    const bar = hud.querySelector("[data-goal-bar]");
    const label = hud.querySelector("[data-goal-label]");
    const animateNumber = (from, to, ms = 1400) => {
      const start = performance.now();
      const tick = (now) => {
        const p = Math.min((now - start) / ms, 1);
        const val = Math.floor(from + (to - from) * p);
        label.textContent = `$${val.toLocaleString()} / $${total.toLocaleString()}`;
        if (p < 1) requestAnimationFrame(tick);
      };
      requestAnimationFrame(tick);
    };
    const playHud = () => {
      arc.style.strokeDashoffset = fullDash * (1 - raised / total);
      bar.value = raised;
      animateNumber(0, raised);
    };
    new IntersectionObserver(
      ([entry], obs) => {
        if (entry.isIntersecting) {
          playHud();
          obs.disconnect();
        }
      },
      { threshold: 0.35 }
    ).observe(hud);
    if (typeof window.io === "function") {
      window.io().on("donation_update", ({ total: newTotal }) => {
        if (newTotal <= raised) return;
        animateNumber(raised, newTotal);
        raised = newTotal;
        bar.value = newTotal;
        arc.style.strokeDashoffset = fullDash * (1 - newTotal / total);
      });
    }
  })();
})();
//# sourceMappingURL=bundle.min.js.map
